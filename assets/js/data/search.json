[
  
  {
    "title": "GitHub Pages 개설하기",
    "url": "/posts/github-pages/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2025-05-07 11:45:00 +0900",
    





    
    "snippet": "  언젠간 해야지 해야지 하던 숙제를 드디어 하는 기분입니다  velog, tistory, 네이버 블로그, GitHub Pages 등 여러 플랫폼을 고민하다가 내 친구 chatGPT의 추천으로 GitHub Pages로 선택하게 되었습니다.Jekyll 과 GitHub Pages우선 블로그를 만들때 제가 사용할 도구는 Jekyll입니다.  Jekyll은 ...",
    "content": "  언젠간 해야지 해야지 하던 숙제를 드디어 하는 기분입니다  velog, tistory, 네이버 블로그, GitHub Pages 등 여러 플랫폼을 고민하다가 내 친구 chatGPT의 추천으로 GitHub Pages로 선택하게 되었습니다.Jekyll 과 GitHub Pages우선 블로그를 만들때 제가 사용할 도구는 Jekyll입니다.  Jekyll은 루비 기반 정적 사이트 생성기입니다.제가 개설하면서 참고한 여러 블로그에서는 일단 루비와 Jekyll을 다운받고 시작했는데, 저는 그럴 필요가 없다고 생각해서 순서를 좀 바꿔보겠습니다.Jekyll 테마 선택제일 먼저 해야할건 Jekyll 테마를 선택하는 겁니다.다양한 사이트에서 테마를 선택할 수 있는데, 여러 사이트를 비교해 본 결과 굳이 그럴 필요가 없다고 생각합니다.그냥 제일 보기 편한 사이트에서 테마를 고르면 될거 같습니다.테마 사이트귀찮아서 링크 하나만 추가한거 맞아요. Jekyll theme 검색하면 많이 뜹니다  Demo를 누르면 미리보기가 가능하니 테마 고를때 참고하세요제가 처음에 고른 테마는 Not Pure Poole 테마입니다. 전체적으로 심플하면서 적당한 커스터마이징도 가능한 부분이 마음에 들었습니다.홍대병이 있어서 사람들이 많이 사용하지 않는 테마라는 점도 마음에 들었습니다.그리고 실제로 어느정도 꾸며서 블로그 포스팅 준비를 다 마친 상황이었습니다.하지만… 게시글 목록을 볼때 아래 페이지 번호를 표기해주는 것이 아닌 Older, Newer만 표기되는 점이 너무 마음에 안들었고, 제 실력으로는 수정이 불가능했습니다그래서 Chripy 테마로 다시 선택하게 되었습니다.유명한 테마는 역시 이유가 있는거 같습니다. 홍대병보단 커스터마이징이 우선인지라..Repository 생성, 빌드테마를 다 골랐으면 고른 테마의 Homepage를 누르면 됩니다.이제 GitHub Repository가 뜨면 그 Repository를 복사해서 제 GitHub Repository를 만들어주면 됩니다.  chripy테마는 해당 github의 chripy-starter repository를 가져오는걸 추천합니다여기서 fork해서 repository를 가져오는 방법이 있고, ZIP 파일로 다운을 받아서 Repository에 넣어주는 방법이 있습니다.처음 개설할때는 fork하는 방법을 사용했는데, GitHub 잔디가 안심겼습니다. 그 문제를 해결하는 과정도 귀찮았고, 어떤 블로그를 보면서 따라한거라 방법도 잘 기억이 안나기 때문에 ZIP 파일을 다운받도록 하겠습니다.다운을 받았으면 Repository를 생성하고 이름을 GitHub username.github.io로 설정해주시면 됩니다.그 후 다운받은 파일의 압축을 풀고 모두 복사해서 생성한 Repository에 넣어주면 됩니다.저는 착하니까 fork하는 방법도 포스팅하겠습니다.사실 별거 없습니다. fork 누르고 Repository 이름을 GitHub username.github.io 설정하면 됩니다.  이름을 잘못 설정했다면, setting에 들어가서 다시 변경할 수 있습니다.끝입니다. 간단하죠?GitHub 잔디를 심고싶다면 여기를 참고하세요.GitHub Pages 확인Reposity에서 Settings &gt; Pages에 들어가면 GitHub Pages 설정을 확인할 수 있습니다.보통 main 브랜치를 선택하고, 디렉토리는 / (root)로 설정하면 자동으로 블로그가 배포됩니다.https://github username.github.io로 접속해보면 블로그가 뜹니다.  1 ~ 5분 정도의 시간이 걸립니다.여기서 운명이 갈립니다.만약 고른 테마의 Demo와 같은 블로그가 개설이 되었다?축하드립니다. 당신은 아래의 기본 설정 변경하기 챕터로 넘어가셔도 됩니다.아래의 내용을 몰라도 블로그를 작성하는데 아무런 문제가 없습니다.혹시 이런식으로 뜨셨나요?축하드립니다. 당신은 저와 같은 깐깐한 입맛의 소유자입니다.github내에서 바로 빌드가 어려운 복잡한 테마의 경우 이런 식으로 뜬다고 합니다.따라하기 귀찮다면 그냥 간단한 테마로 새로 고르는 것도 추천드립니다Ruby 와 Jekyll 설치제 포스팅은 Chripy테마로 블로그를 생성한 과정입니다.  혹시 다른 테마를 선택하셨고, 제 포스팅을 참고했는데도 안된다면 당신의 친구 chatGPT한테 물어보세요.Chirpy를 쓰려면 Ruby와 Jekyll을 설치하고 Bundler도 같이 깔아야 합니다.Ruby 설치macOS에는 기본으로 탑재되어 있다고 하니, 다른 OS의 경우에만 설치해주시면 될거 같습니다.RubyInstaller 공식 사이트WITH DEVKIT 버전을 다운하시면 됩니다.설치하면서 MSYS2 옵션을 같이 설치하라고 뜨는데, 꼭 설치해야 합니다.설치하는 과정 스크린샷을 못 찍었는데, 참고 이미지 없어도 잘 하실거라 믿습니다.설치가 다 끝나고, 터미널(명령 프롬프트 혹은 Git Bash)을 열어서 아래의 코드를 각각 입력했을 때 버전이 나오면 성공입니다.ruby -vgem -vJekyll &amp; Bundler 설치Ruby가 설치되면, 터미널(또는 Git Bash)를 열고gem install jekyll bundler설치 다 되는데 몇 분 정도 걸릴 수 있습니다설치 이후 해야 할 것git clone으로 블로그 Repository를 컴퓨터로 가져오세요.  터미널에서 git clone하는 방법이나 GitHub Desktop을 사용해서 clone하는 방법중 편하신걸로 하세요# 프로젝트 폴더로 이동cd your-blog-repo# 필요한 gem 설치bundle install# 로컬에서 사이트 띄우기bundle exec jekyll serve그럼 http://localhost:4000 에서 블로그를 볼 수 있습니다.이때 에러없이 정상적으로 잘 뜬다면 GitHub Pages에도 정상 배포 가능한 상태입니다.GitHub Pages 배포하기터미널에서 다시 프로젝트 폴더로 이동한 후bundle exec jekyll build를 입력한다면 _site/ 폴더 안에 정적 사이트 파일이 생성이 됩니다.이 _site/폴더가 최종 배포용 파일 입니다.GitHub에 gh-pages 브랜치 만들기혹시 터미널을 닫거나 프로젝트 폴더를 벗어났다면, 다시 프로젝트 폴더로 이동해 줍니다.터미널에 아래의 코드를 입력해줍니다.git checkout --orphan gh-pagesgit reset --hard  gh-pages라는 비어있는 브랜치를 만드는 코드입니다.  main source 코드들과는 섞이면 안되기 때문에 비어있는 orphan 브랜치를 사용합니다.이제 _site/폴더 안으로 이동해 줍니다cd _site그 후 .git을 초기화 하고git initgit add .git commit -m \"Deploy my blog\"# who you are 이라고 뜬다면 그 아래의 git config로 뜨는 명령어 맨 뒤 \"\" 안의# 내용만 수정해서 둘 다다실행 후 위의 명령어부터 다시 입력해주세요.git branch -M gh-pagesgit remote add origin https://github.com/내계정명/내저장소명.gitgit push -f origin gh-pages‼️ 주의: origin 주소는 당신의 GitHub 저장소 주소로 바꿔줘야 합니다.  블로그 내용을 수정하고 재배포할때도 같은 코드를 입력하면 됩니다.GitHub Repository 설정 수정GitHub Repository로 가서Settings ➔ Pages 탭 들어가서아래 이미지와 같이 설정해 준 후 save 버튼을 누르면 끝납니다이제 조금만 기다리면 https://내계정명.github.io/주소로 블로그가 열립니다.기본 설정 변경하기블로그를 개인의 스타일로 바꾸기 위해 가장 먼저 수정해야 할 파일은 _config.yml입니다.사이트 이름, 이메일, 소개글, SNS 링크 등 여러 정보를 이 파일에서 바꿀 수 있습니다."
  },
  
  {
    "title": "[게임 프로그래밍을 위한 3차원 그래픽스] Ch01-1 게임 제작 파이프라인",
    "url": "/posts/ch01-1/",
    "categories": "Graphics, Study Notes",
    "tags": "graphics, polygon_mesh, pipeline, vector, coordinate",
    "date": "2025-04-26 21:00:00 +0900",
    





    
    "snippet": "  『게임 프로그래밍을 위한 3차원 그래픽스』 - 한정현 저. 홍릉과학출판사 책을 공부한 내용입니다.  http://media.korea.ac.kr/books/ 해당 링크에 첨부된 자료를 이용하여 작성한 글입니다.1.1 게임 제작 파이프라인그래픽스 관점의 파이프라인  모델링 → 리깅 → 애니메이션 → 렌더링 → 후처리그래픽 아티스트: 모델링과 리깅 및...",
    "content": "  『게임 프로그래밍을 위한 3차원 그래픽스』 - 한정현 저. 홍릉과학출판사 책을 공부한 내용입니다.  http://media.korea.ac.kr/books/ 해당 링크에 첨부된 자료를 이용하여 작성한 글입니다.1.1 게임 제작 파이프라인그래픽스 관점의 파이프라인  모델링 → 리깅 → 애니메이션 → 렌더링 → 후처리그래픽 아티스트: 모델링과 리깅 및 애니메이션의 전반부프로그래머: 애니메이션 후반부와 렌더링 및 후처리 작업  애니메이션 단계 = off-line 작업(그래픽 아티스트) + run-time 작업(프로그램)모델링 단계게임 환경 구성에 필요한 여러 가지 객체 만드는 단계ex. 슈팅게임에서는 군인, 총, 지형맵(terrain map) 등이러한 각 개체들은 폴리곤(polygon, 다각형)으로 구성되고, 이러한 물체를 폴리곤 메쉬(polygon mash)라 부른다.  게임에서 가장 많이 쓰이는 모델링 기법이다.시각적 사실성을 높여주는 텍스처(texture)의 제작 또한 매우 중요한 모델링 작업이다.  모델링 대상은 3차원 물체로 국한 되지 않는다.texture image 와 polygon mesh에 textrue 입힌 모습많이 사용하는 텍스처는 물체 표면 색상을 결정하는 비트맵 이미지(bitmap image)이다.리깅 단계계애니메이션을 위해서는 골격(skeleton)을 구성한 후, 각각의 뼈의 움직임이 폴리곤 메쉬를 어떻게 변형하는지 정의해야 한다.ex. 군인 모델이 걷고 뛰기 위해서 허벅지 뼈가 움직일 때 허벅지를 구성하는 폴리곤이 따라서 움직이도록 설정이러한 과정을 리깅(rigging)이라고 부른른다.폴리곤 메쉬에 삽입된 골격삽입된 골격을 움직여 에니메이션 생성애니메이션 단계계컴퓨터 게임 및 애니메이션에서는 조금씩 변화하는 연속적인 영상을 스크린 상에 빠르게 보여줌으로 움직임을 묘사한다.여기서 각각의 영상을 프레임(frame)이라고 부른다.  초당 60개의 프레임을 생성한다면 60fps(frames per second)물체의 애니메이션을 런타임에 재생할 때, 매 프레임마다 해당 물체의 위치와 방향을 계산해야 한다.역학(dynamics)을 처리하여 매 프레임마다 관련 물체들의 위치와 방향을 갱신한다.조명 상태와 시점(viewpoint) 또한 매 프레임마다 바뀔 수 있다.렌더링 단계각 프레임을 구성하는 모든 요소가 결정되면 렌더링(rendering) 모듈이 실행된다.  렌더링: 3차원 장면에서 2차원 영상(프레임)을 생성해 내는 과정위의 그림을 렌더링한 결과후처리 단계컴퓨터 게임의 최종 화면은 후처리(postprocessing)된 영상을 보여준다.  시각적 사실성을 높이기 위한 작업은 모두 후처리 단계에서 이루어 진다.  ex. 모션 블러(motion blur), 초점 심도(depth of field)런타임 애니메이션과 렌더링 및 후처리 단계는 게임 프로그램에 의해 실행된다.게임 프로그램은 그래픽스 API(Application Programming Interface)를 기반으로 작성된다.  API는 그래픽스 응용에 필수적인 함수들을 제공한다.  이러한 함수는 대부분 GPU 내에서 하드웨어로 구현 되어 있다.  그래픽스 API는 그래픽스 응용 프로그래밍에서 호출하는 함수를 GPU에서 실행 가능한 명령들로 바꿔주는 역할을 한다."
  },
  
  {
    "title": "[게임 프로그래밍을 위한 3차원 그래픽스] Ch01 폴리곤 메쉬",
    "url": "/posts/ch01/",
    "categories": "Graphics, Study Notes",
    "tags": "graphics, polygon_mesh, pipeline, vector, coordinate",
    "date": "2025-04-25 21:00:00 +0900",
    





    
    "snippet": "  『게임 프로그래밍을 위한 3차원 그래픽스』 - 한정현 저. 홍릉과학출판사 책을 공부한 내용입니다.  http://media.korea.ac.kr/books/ 해당 링크에 첨부된 자료를 이용하여 작성한 글입니다.chap 01 폴리곤 메쉬게임 개발 과정  제작 전(pre-production):          게임 캐릭터 디자인      스토리라인 구...",
    "content": "  『게임 프로그래밍을 위한 3차원 그래픽스』 - 한정현 저. 홍릉과학출판사 책을 공부한 내용입니다.  http://media.korea.ac.kr/books/ 해당 링크에 첨부된 자료를 이용하여 작성한 글입니다.chap 01 폴리곤 메쉬게임 개발 과정  제작 전(pre-production):          게임 캐릭터 디자인      스토리라인 구성      스토리보드 제작      게임 디자인 문서 작성        제작(production):          게임 디자인 문서 수정      게임 프로그램      3차원 모델, 이미지, 애니메이션 데이터        제작 후(post-production):          결함과 버그를 통한 수정 (Debugging)      반복된 수정 후 최정 버전 산출 (+ Optimization)      이 책은 게임 제작 단계의 3차원 그래픽스 내용을 다룬다3차원 그래픽스는 모델링(modeling)으로부터 시작된다.목차1.1 게임 제작 파이프라인1.2 폴리곤 메쉬  1.2.1 폴리곤 메쉬 제작  1.2.2 폴리곤 메쉬 표현 기법  1.2.3 노멀 벡터1.3 모델 내보내기와 불러오기1.4 좌표계"
  }
  
]

